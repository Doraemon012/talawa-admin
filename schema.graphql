directive @auth on FIELD_DEFINITION

directive @role(requires: UserType) on FIELD_DEFINITION

<<<<<<< HEAD
type ActionItem {
  _id: ID!
  actionItemCategory: ActionItemCategory
  assignee: User
  assigner: User
  assignmentDate: Date!
  completionDate: Date!
  createdAt: Date!
  creator: User
  dueDate: Date!
  event: Event
  isCompleted: Boolean!
  postCompletionNotes: String
  preCompletionNotes: String
  updatedAt: Date!
}

type ActionItemCategory {
  _id: ID!
  createdAt: Date!
  creator: User
  isDisabled: Boolean!
  name: String!
  organization: Organization
  updatedAt: Date!
}

type Address {
  city: String
  countryCode: String
  dependentLocality: String
  line1: String
  line2: String
  postalCode: String
  sortingCode: String
  state: String
}

input AddressInput {
  city: String
  countryCode: String
  dependentLocality: String
  line1: String
  line2: String
  postalCode: String
  sortingCode: String
  state: String
}

type Advertisement {
  _id: ID!
  createdAt: DateTime!
  creator: User
  endDate: Date!
  mediaUrl: URL!
  name: String!
  orgId: ID!
  startDate: Date!
  type: AdvertisementType!
  updatedAt: DateTime!
}

enum AdvertisementType {
  BANNER
  MENU
  POPUP
}

type AgendaCategory {
  _id: ID!
  createdAt: Date!
  createdBy: User!
  description: String
  name: String!
  organization: Organization!
  updatedAt: Date
  updatedBy: User
=======
type Advertisement {
  _id: ID
  endDate: Date!
  link: String!
  name: String!
  orgId: ID
  startDate: Date!
  type: String!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

<<<<<<< HEAD
scalar Any

type AppUserProfile {
  _id: ID!
  adminFor: [Organization]
  appLanguageCode: String!
  createdEvents: [Event]
  createdOrganizations: [Organization]
  eventAdmin: [Event]
  isSuperAdmin: Boolean!
  pluginCreationAllowed: Boolean!
  userId: User!
=======
type AndroidFirebaseOptions {
  apiKey: String
  appId: String
  messagingSenderId: String
  projectId: String
  storageBucket: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

type AuthData {
  accessToken: String!
<<<<<<< HEAD
  appUserProfile: AppUserProfile!
=======
  androidFirebaseOptions: AndroidFirebaseOptions!
  iosFirebaseOptions: IOSFirebaseOptions!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  refreshToken: String!
  user: User!
}

type CheckIn {
  _id: ID!
  allotedRoom: String
  allotedSeat: String
<<<<<<< HEAD
  createdAt: DateTime!
  event: Event!
  feedbackSubmitted: Boolean!
  time: DateTime!
  updatedAt: DateTime!
=======
  event: Event!
  feedbackSubmitted: Boolean!
  time: DateTime!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  user: User!
}

input CheckInInput {
  allotedRoom: String
  allotedSeat: String
  eventId: ID!
  userId: ID!
}

type CheckInStatus {
  _id: ID!
  checkIn: CheckIn
  user: User!
}

type Comment {
<<<<<<< HEAD
  _id: ID!
  createdAt: DateTime!
  creator: User
=======
  _id: ID
  createdAt: DateTime
  creator: User!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  likeCount: Int
  likedBy: [User]
  post: Post!
  text: String!
<<<<<<< HEAD
  updatedAt: DateTime!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input CommentInput {
  text: String!
}

union ConnectionError = InvalidCursor | MaximumValueError

type ConnectionPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

<<<<<<< HEAD
scalar CountryCode

input CreateActionItemInput {
  assigneeId: ID!
  dueDate: Date
  eventId: ID
  preCompletionNotes: String
}

input CreateAgendaCategoryInput {
  description: String
  name: String!
  organizationId: ID!
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
input CreateUserTagInput {
  name: String!
  organizationId: ID!
  parentTagId: ID
}

input CursorPaginationInput {
  cursor: String
  direction: PaginationDirection!
  limit: PositiveInt!
}

scalar Date

scalar DateTime

type DeletePayload {
  success: Boolean!
}

type DirectChat {
  _id: ID!
<<<<<<< HEAD
  createdAt: DateTime!
  creator: User
  messages: [DirectChatMessage]
  organization: Organization!
  updatedAt: DateTime!
=======
  creator: User!
  messages: [DirectChatMessage]
  organization: Organization!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  users: [User!]!
}

type DirectChatMessage {
  _id: ID!
  createdAt: DateTime!
  directChatMessageBelongsTo: DirectChat!
  messageContent: String!
  receiver: User!
  sender: User!
<<<<<<< HEAD
  updatedAt: DateTime!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

type Donation {
  _id: ID!
  amount: Float!
<<<<<<< HEAD
  createdAt: DateTime!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  nameOfOrg: String!
  nameOfUser: String!
  orgId: ID!
  payPalId: String!
<<<<<<< HEAD
  updatedAt: DateTime!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  userId: ID!
}

input DonationWhereInput {
  id: ID
  id_contains: ID
  id_in: [ID!]
  id_not: ID
  id_not_in: [ID!]
  id_starts_with: ID
  name_of_user: String
  name_of_user_contains: String
  name_of_user_in: [String!]
  name_of_user_not: String
  name_of_user_not_in: [String!]
  name_of_user_starts_with: String
}

<<<<<<< HEAD
enum EducationGrade {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
  GRADUATE
  KG
  NO_GRADE
  PRE_KG
}

scalar EmailAddress

enum EmploymentStatus {
  FULL_TIME
  PART_TIME
  UNEMPLOYED
}

=======
scalar EmailAddress

>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
interface Error {
  message: String!
}

type Event {
  _id: ID!
<<<<<<< HEAD
  actionItems: [ActionItem]
  admins(adminId: ID): [User!]
  allDay: Boolean!
  attendees: [User]
  attendeesCheckInStatus: [CheckInStatus!]!
  averageFeedbackScore: Float
  createdAt: DateTime!
  creator: User
  description: String!
  endDate: Date
=======
  admins(adminId: ID): [User]
  allDay: Boolean!
  attendees: [User!]!
  attendeesCheckInStatus: [CheckInStatus!]!
  averageFeedbackScore: Float
  creator: User!
  description: String!
  endDate: Date!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  endTime: Time
  feedback: [Feedback!]!
  isPublic: Boolean!
  isRegisterable: Boolean!
  latitude: Latitude
  location: String
  longitude: Longitude
  organization: Organization
<<<<<<< HEAD
=======
  projects: [EventProject]
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  recurrance: Recurrance
  recurring: Boolean!
  startDate: Date!
  startTime: Time
  status: Status!
  title: String!
<<<<<<< HEAD
  updatedAt: DateTime!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input EventAttendeeInput {
  eventId: ID!
  userId: ID!
}

input EventInput {
  allDay: Boolean!
  description: String!
  endDate: Date
  endTime: Time
  isPublic: Boolean!
  isRegisterable: Boolean!
  latitude: Latitude
  location: String
  longitude: Longitude
  organizationId: ID!
  recurrance: Recurrance
  recurring: Boolean!
  startDate: Date!
  startTime: Time
  title: String!
}

enum EventOrderByInput {
  allDay_ASC
  allDay_DESC
  description_ASC
  description_DESC
  endDate_ASC
  endDate_DESC
  endTime_ASC
  endTime_DESC
  id_ASC
  id_DESC
  location_ASC
  location_DESC
  recurrance_ASC
  recurrance_DESC
  startDate_ASC
  startDate_DESC
  startTime_ASC
  startTime_DESC
  title_ASC
  title_DESC
}

<<<<<<< HEAD
type EventVolunteer {
  _id: ID!
  createdAt: DateTime!
  creator: User
  event: Event
  isAssigned: Boolean
  isInvited: Boolean
  response: String
  updatedAt: DateTime!
  user: User!
}

input EventVolunteerInput {
  eventId: ID!
  userId: ID!
}

enum EventVolunteerResponse {
  NO
  YES
=======
type EventProject {
  _id: ID!
  description: String!
  event: Event!
  tasks: [Task]
  title: String!
}

input EventProjectInput {
  description: String!
  eventId: ID!
  title: String!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input EventWhereInput {
  description: String
  description_contains: String
  description_in: [String!]
  description_not: String
  description_not_in: [String!]
  description_starts_with: String
  id: ID
  id_contains: ID
  id_in: [ID!]
  id_not: ID
  id_not_in: [ID!]
  id_starts_with: ID
  location: String
  location_contains: String
  location_in: [String!]
  location_not: String
  location_not_in: [String!]
  location_starts_with: String
  organization_id: ID
  title: String
  title_contains: String
  title_in: [String!]
  title_not: String
  title_not_in: [String!]
  title_starts_with: String
}

type ExtendSession {
  accessToken: String!
  refreshToken: String!
}

type Feedback {
  _id: ID!
<<<<<<< HEAD
  createdAt: DateTime!
  event: Event!
  rating: Int!
  review: String
  updatedAt: DateTime!
=======
  event: Event!
  rating: Int!
  review: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input FeedbackInput {
  eventId: ID!
  rating: Int!
  review: String
}

interface FieldError {
  message: String!
  path: [String!]!
}

input ForgotPasswordData {
  newPassword: String!
  otpToken: String!
  userOtp: String!
}

<<<<<<< HEAD
enum Frequency {
  DAILY
  MONTHLY
  WEEKLY
  YEARLY
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

type Group {
  _id: ID!
  admins: [User!]!
  createdAt: DateTime!
  description: String
  organization: Organization!
  title: String!
  updatedAt: DateTime!
=======
type Group {
  _id: ID
  admins: [User]
  createdAt: DateTime
  description: String
  organization: Organization!
  title: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

type GroupChat {
  _id: ID!
<<<<<<< HEAD
  createdAt: DateTime!
  creator: User
  messages: [GroupChatMessage]
  organization: Organization!
  updatedAt: DateTime!
=======
  creator: User!
  messages: [GroupChatMessage]
  organization: Organization!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  users: [User!]!
}

type GroupChatMessage {
  _id: ID!
  createdAt: DateTime!
  groupChatMessageBelongsTo: GroupChat!
  messageContent: String!
  sender: User!
<<<<<<< HEAD
  updatedAt: DateTime!
=======
}

type IOSFirebaseOptions {
  apiKey: String
  appId: String
  iosBundleId: String
  iosClientId: String
  messagingSenderId: String
  projectId: String
  storageBucket: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

type InvalidCursor implements FieldError {
  message: String!
  path: [String!]!
}

<<<<<<< HEAD
scalar JSON

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
type Language {
  _id: ID!
  createdAt: String!
  en: String!
  translation: [LanguageModel]
}

input LanguageInput {
  en_value: String!
  translation_lang_code: String!
  translation_value: String!
}

type LanguageModel {
  _id: ID!
  createdAt: DateTime!
  lang_code: String!
  value: String!
  verified: Boolean!
}

scalar Latitude

input LoginInput {
  email: EmailAddress!
  password: String!
}

scalar Longitude

<<<<<<< HEAD
enum MaritalStatus {
  DIVORCED
  ENGAGED
  MARRIED
  SEPERATED
  SINGLE
  WIDOWED
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
type MaximumLengthError implements FieldError {
  message: String!
  path: [String!]!
}

type MaximumValueError implements FieldError {
  limit: Int!
  message: String!
  path: [String!]!
}

type MembershipRequest {
  _id: ID!
  organization: Organization!
  user: User!
}

type Message {
  _id: ID!
<<<<<<< HEAD
  createdAt: DateTime!
  creator: User
  imageUrl: URL
  text: String!
  updatedAt: DateTime!
=======
  createdAt: DateTime
  creator: User
  imageUrl: URL
  text: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  videoUrl: URL
}

type MessageChat {
  _id: ID!
  createdAt: DateTime!
  languageBarrier: Boolean
  message: String!
  receiver: User!
  sender: User!
<<<<<<< HEAD
  updatedAt: DateTime!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input MessageChatInput {
  message: String!
  receiver: ID!
}

type MinimumLengthError implements FieldError {
  limit: Int!
  message: String!
  path: [String!]!
}

type MinimumValueError implements FieldError {
  message: String!
  path: [String!]!
}

<<<<<<< HEAD
enum AdvertisementType {
  BANNER
  MENU
  POPUP
}

input CreateAdvertisementInput {
  endDate: Date!
  name: String!
  organizationId: ID!
  startDate: Date!
  type: AdvertisementType!
  mediaFile: String!
}

type CreateAdvertisementPayload {
  advertisement: Advertisement
}

input EditVenueInput {
  capacity: Int
  description: String
  file: String
  id: ID!
  name: String
}

type Mutation {
=======
type Mutation {
  acceptAdmin(id: ID!): Boolean!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  acceptMembershipRequest(membershipRequestId: ID!): MembershipRequest!
  addEventAttendee(data: EventAttendeeInput!): User!
  addFeedback(data: FeedbackInput!): Feedback!
  addLanguageTranslation(data: LanguageInput!): Language!
<<<<<<< HEAD
  addOrganizationCustomField(
    name: String!
    organizationId: ID!
    type: String!
  ): OrganizationCustomField!
  addOrganizationImage(file: String!, organizationId: String!): Organization!
  addUserCustomData(
    dataName: String!
    dataValue: Any!
    organizationId: ID!
  ): UserCustomData!
  addUserImage(file: String!): User!
  addUserToGroupChat(chatId: ID!, userId: ID!): GroupChat!
  addUserToUserFamily(familyId: ID!, userId: ID!): UserFamily!
  adminRemoveEvent(eventId: ID!): Event!
  adminRemoveGroup(groupId: ID!): GroupChat!
  assignUserTag(input: ToggleUserTagAssignInput!): User
  blockPluginCreationBySuperadmin(
    blockUser: Boolean!
    userId: ID!
  ): AppUserProfile!
  blockUser(organizationId: ID!, userId: ID!): User!
  cancelMembershipRequest(membershipRequestId: ID!): MembershipRequest!
  checkIn(data: CheckInInput!): CheckIn!
  createActionItem(
    actionItemCategoryId: ID!
    data: CreateActionItemInput!
  ): ActionItem!
  createActionItemCategory(
    name: String!
    organizationId: ID!
  ): ActionItemCategory!
  createAdmin(data: UserAndOrganizationInput!): AppUserProfile!
=======
  addOrganizationImage(file: String!, organizationId: String!): Organization!
  addUserImage(file: String!): User!
  addUserToGroupChat(chatId: ID!, userId: ID!): GroupChat!
  adminRemoveEvent(eventId: ID!): Event!
  adminRemoveGroup(groupId: ID!): GroupChat!
  assignUserTag(input: ToggleUserTagAssignInput!): User
  blockPluginCreationBySuperadmin(blockUser: Boolean!, userId: ID!): User!
  blockUser(organizationId: ID!, userId: ID!): User!
  cancelMembershipRequest(membershipRequestId: ID!): MembershipRequest!
  checkIn(data: CheckInInput!): CheckIn!
  createAdmin(data: UserAndOrganizationInput!): User!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  createAdvertisement(
    endDate: Date!
    link: String!
    name: String!
    orgId: ID!
    startDate: Date!
    type: String!
  ): Advertisement!
<<<<<<< HEAD
  createAgendaCategory(input: CreateAgendaCategoryInput!): AgendaCategory!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  createComment(data: CommentInput!, postId: ID!): Comment
  createDirectChat(data: createChatInput!): DirectChat!
  createDonation(
    amount: Float!
    nameOfOrg: String!
    nameOfUser: String!
    orgId: ID!
    payPalId: ID!
    userId: ID!
  ): Donation!
<<<<<<< HEAD
  createEvent(
    data: EventInput!
    recurrenceRuleData: RecurrenceRuleInput
  ): Event!
  createEventVolunteer(data: EventVolunteerInput!): EventVolunteer!
=======
  createEvent(data: EventInput): Event!
  createEventProject(data: EventProjectInput!): EventProject!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  createGroupChat(data: createGroupChatInput!): GroupChat!
  createMember(input: UserAndOrganizationInput!): Organization!
  createMessageChat(data: MessageChatInput!): MessageChat!
  createOrganization(data: OrganizationInput, file: String): Organization!
  createPlugin(
    pluginCreatedBy: String!
    pluginDesc: String!
    pluginName: String!
    uninstalledOrgs: [ID!]
  ): Plugin!
  createPost(data: PostInput!, file: String): Post
<<<<<<< HEAD
  createSampleOrganization: Boolean!
  createUserFamily(data: createUserFamilyInput!): UserFamily!
  createUserTag(input: CreateUserTagInput!): UserTag
  createVenue(data: VenueInput!): Venue
  deleteAdvertisement(id: ID!): DeletePayload!
  deleteAdvertisementById(id: ID!): DeletePayload!
  deleteAgendaCategory(id: ID!): ID!
  deleteDonationById(id: ID!): DeletePayload!
  deleteVenue(id: ID!): Venue
  editVenue(data: EditVenueInput!): Venue
=======
  createTask(data: TaskInput!, eventProjectId: ID!): Task!
  createUserTag(input: CreateUserTagInput!): UserTag
  deleteAdvertisementById(id: ID!): DeletePayload!
  deleteDonationById(id: ID!): DeletePayload!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  forgotPassword(data: ForgotPasswordData!): Boolean!
  joinPublicOrganization(organizationId: ID!): User!
  leaveOrganization(organizationId: ID!): User!
  likeComment(id: ID!): Comment
  likePost(id: ID!): Post
  login(data: LoginInput!): AuthData!
  logout: Boolean!
  otp(data: OTPInput!): OtpData!
  recaptcha(data: RecaptchaVerification!): Boolean!
  refreshToken(refreshToken: String!): ExtendSession!
  registerForEvent(id: ID!): Event!
<<<<<<< HEAD
  rejectMembershipRequest(membershipRequestId: ID!): MembershipRequest!
  removeActionItem(id: ID!): ActionItem!
  removeAdmin(data: UserAndOrganizationInput!): AppUserProfile!
=======
  rejectAdmin(id: ID!): Boolean!
  rejectMembershipRequest(membershipRequestId: ID!): MembershipRequest!
  removeAdmin(data: UserAndOrganizationInput!): User!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  removeAdvertisement(id: ID!): Advertisement
  removeComment(id: ID!): Comment
  removeDirectChat(chatId: ID!, organizationId: ID!): DirectChat!
  removeEvent(id: ID!): Event!
  removeEventAttendee(data: EventAttendeeInput!): User!
<<<<<<< HEAD
  removeEventVolunteer(id: ID!): EventVolunteer!
  removeGroupChat(chatId: ID!): GroupChat!
  removeMember(data: UserAndOrganizationInput!): Organization!
  removeOrganization(id: ID!): UserData!
  removeOrganizationCustomField(
    customFieldId: ID!
    organizationId: ID!
  ): OrganizationCustomField!
  removeOrganizationImage(organizationId: String!): Organization!
  removePost(id: ID!): Post
  removeSampleOrganization: Boolean!
  removeUserCustomData(organizationId: ID!): UserCustomData!
  removeUserFamily(familyId: ID!): UserFamily!
  removeUserFromGroupChat(chatId: ID!, userId: ID!): GroupChat!
  removeUserFromUserFamily(familyId: ID!, userId: ID!): UserFamily!
  removeUserImage: User!
  removeUserTag(id: ID!): UserTag
  revokeRefreshTokenForUser: Boolean!
=======
  removeEventProject(id: ID!): EventProject!
  removeGroupChat(chatId: ID!): GroupChat!
  removeMember(data: UserAndOrganizationInput!): Organization!
  removeOrganization(id: ID!): User!
  removeOrganizationImage(organizationId: String!): Organization!
  removePost(id: ID!): Post
  removeTask(id: ID!): Task
  removeUserFromGroupChat(chatId: ID!, userId: ID!): GroupChat!
  removeUserImage: User!
  removeUserTag(id: ID!): UserTag
  revokeRefreshTokenForUser(userId: String!): Boolean!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  saveFcmToken(token: String): Boolean!
  sendMembershipRequest(organizationId: ID!): MembershipRequest!
  sendMessageToDirectChat(
    chatId: ID!
    messageContent: String!
  ): DirectChatMessage!
  sendMessageToGroupChat(
    chatId: ID!
    messageContent: String!
  ): GroupChatMessage!
<<<<<<< HEAD
  signUp(data: UserInput!, file: String): AuthData!
  togglePostPin(id: ID!, title: String): Post!
=======
  setTaskVolunteers(id: ID!, volunteers: [ID]!): Task
  signUp(data: UserInput!, file: String): AuthData!
  togglePostPin(id: ID!): Post!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  unassignUserTag(input: ToggleUserTagAssignInput!): User
  unblockUser(organizationId: ID!, userId: ID!): User!
  unlikeComment(id: ID!): Comment
  unlikePost(id: ID!): Post
  unregisterForEventByUser(id: ID!): Event!
<<<<<<< HEAD
  updateActionItem(data: UpdateActionItemInput!, id: ID!): ActionItem
  updateActionItemCategory(
    data: UpdateActionItemCategoryInput!
    id: ID!
  ): ActionItemCategory
  updateAdvertisement(
    input: UpdateAdvertisementInput!
  ): UpdateAdvertisementPayload
  updateAgendaCategory(
    id: ID!
    input: UpdateAgendaCategoryInput!
  ): AgendaCategory
  updateEvent(data: UpdateEventInput, id: ID!): Event!
  updateEventVolunteer(
    data: UpdateEventVolunteerInput
    id: ID!
  ): EventVolunteer!
=======
  updateEvent(data: UpdateEventInput, id: ID!): Event!
  updateEventProject(data: UpdateEventProjectInput!, id: ID!): EventProject!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  updateLanguage(languageCode: String!): User!
  updateOrganization(
    data: UpdateOrganizationInput
    file: String
    id: ID!
  ): Organization!
  updatePluginStatus(id: ID!, orgId: ID!): Plugin!
  updatePost(data: PostUpdateInput, id: ID!): Post!
<<<<<<< HEAD
  updateUserPassword(data: UpdateUserPasswordInput!): UserData!
  updateUserProfile(data: UpdateUserInput, file: String): User!
  updateUserRoleInOrganization(
    organizationId: ID!
    role: String!
    userId: ID!
  ): Organization!
  updateUserTag(input: UpdateUserTagInput!): UserTag
  updateUserType(data: UpdateUserTypeInput!): Boolean!
  venues: [Venue]
=======
  updateTask(data: UpdateTaskInput!, id: ID!): Task
  updateUserPassword(data: UpdateUserPasswordInput!): User!
  updateUserProfile(data: UpdateUserInput, file: String): User!
  updateUserTag(input: UpdateUserTagInput!): UserTag
  updateUserType(data: UpdateUserTypeInput!): Boolean!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input OTPInput {
  email: EmailAddress!
}

type Organization {
  _id: ID!
<<<<<<< HEAD
  actionItemCategories: [ActionItemCategory]
  address: Address
  admins(adminId: ID): [User!]
  agendaCategories: [AgendaCategory]
  apiUrl: URL!
  blockedUsers: [User]
  createdAt: DateTime!
  creator: User
  customFields: [OrganizationCustomField!]!
  description: String!
  image: String
=======
  admins(adminId: ID): [User]
  apiUrl: URL!
  blockedUsers: [User]
  createdAt: DateTime
  creator: User!
  description: String!
  image: String
  isPublic: Boolean!
  location: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  members: [User]
  membershipRequests: [MembershipRequest]
  name: String!
  pinnedPosts: [Post]
<<<<<<< HEAD
  updatedAt: DateTime!
  userRegistrationRequired: Boolean!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  userTags(
    after: String
    before: String
    first: PositiveInt
    last: PositiveInt
  ): UserTagsConnection
  visibleInSearch: Boolean!
<<<<<<< HEAD
  venues: [Venue]
}

type OrganizationCustomField {
  _id: ID!
  name: String!
  organizationId: String!
  type: String!
}

type OrganizationCustomField {
  _id: ID!
  name: String!
  organizationId: String!
  type: String!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

type OrganizationInfoNode {
  _id: ID!
  apiUrl: URL!
<<<<<<< HEAD
  creator: User
  description: String!
  image: String
  name: String!
  userRegistrationRequired: Boolean!
=======
  creator: User!
  description: String!
  image: String
  isPublic: Boolean!
  name: String!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  visibleInSearch: Boolean!
}

input OrganizationInput {
<<<<<<< HEAD
  address: AddressInput!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  apiUrl: URL
  attendees: String
  description: String!
  image: String
<<<<<<< HEAD
  name: String!
  userRegistrationRequired: Boolean
  visibleInSearch: Boolean
=======
  isPublic: Boolean!
  location: String
  name: String!
  visibleInSearch: Boolean!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

enum OrganizationOrderByInput {
  apiUrl_ASC
  apiUrl_DESC
<<<<<<< HEAD
  createdAt_ASC
  createdAt_DESC
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input OrganizationWhereInput {
  apiUrl: URL
  apiUrl_contains: URL
  apiUrl_in: [URL!]
  apiUrl_not: URL
  apiUrl_not_in: [URL!]
  apiUrl_starts_with: URL
  description: String
  description_contains: String
  description_in: [String!]
  description_not: String
  description_not_in: [String!]
  description_starts_with: String
  id: ID
  id_contains: ID
  id_in: [ID!]
  id_not: ID
  id_not_in: [ID!]
  id_starts_with: ID
<<<<<<< HEAD
=======
  isPublic: Boolean
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  name: String
  name_contains: String
  name_in: [String!]
  name_not: String
  name_not_in: [String!]
  name_starts_with: String
<<<<<<< HEAD
  userRegistrationRequired: Boolean
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  visibleInSearch: Boolean
}

type OtpData {
  otpToken: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  currPageNo: Int

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  nextPageNo: Int
  prevPageNo: Int
  totalPages: Int
}

enum PaginationDirection {
  BACKWARD
  FORWARD
}

scalar PhoneNumber

type Plugin {
  _id: ID!
  pluginCreatedBy: String!
  pluginDesc: String!
  pluginName: String!
<<<<<<< HEAD
  uninstalledOrgs: [ID!]
}

type PluginField {
  createdAt: DateTime!
=======
  uninstalledOrgs: [ID!]!
}

type PluginField {
  createdAt: DateTime
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  key: String!
  status: Status!
  value: String!
}

input PluginFieldInput {
  key: String!
  value: String!
}

input PluginInput {
  fields: [PluginFieldInput]
  orgId: ID!
  pluginKey: String
  pluginName: String!
  pluginType: Type
}

scalar PositiveInt

type Post {
  _id: ID
  commentCount: Int
  comments: [Comment]
<<<<<<< HEAD
  createdAt: DateTime!
  creator: User
=======
  createdAt: DateTime
  creator: User!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  imageUrl: URL
  likeCount: Int
  likedBy: [User]
  organization: Organization!
  pinned: Boolean
  text: String!
  title: String
<<<<<<< HEAD
  updatedAt: DateTime!
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  videoUrl: URL
}

"""
A connection to a list of items.
"""
type PostConnection {
  aggregate: AggregatePost!

  """
  A list of edges.
  """
  edges: [Post]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

input PostInput {
  _id: ID
  imageUrl: URL
  organizationId: ID!
  pinned: Boolean
  text: String!
  title: String
  videoUrl: URL
}

enum PostOrderByInput {
  commentCount_ASC
  commentCount_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  likeCount_ASC
  likeCount_DESC
  text_ASC
  text_DESC
  title_ASC
  title_DESC
  videoUrl_ASC
  videoUrl_DESC
}

input PostUpdateInput {
  imageUrl: String
  text: String
  title: String
  videoUrl: String
}

input PostWhereInput {
  id: ID
  id_contains: ID
  id_in: [ID!]
  id_not: ID
  id_not_in: [ID!]
  id_starts_with: ID
  text: String
  text_contains: String
  text_in: [String!]
  text_not: String
  text_not_in: [String!]
  text_starts_with: String
  title: String
  title_contains: String
  title_in: [String!]
  title_not: String
  title_not_in: [String!]
  title_starts_with: String
}

type Query {
<<<<<<< HEAD
  actionItem(id: ID!): ActionItem
  actionItemCategoriesByOrganization(organizationId: ID!): [ActionItemCategory]
  actionItemCategory(id: ID!): ActionItemCategory
  actionItemsByEvent(eventId: ID!): [ActionItem]
  actionItemsByOrganization(organizationId: ID!): [ActionItem]
  adminPlugin(orgId: ID!): [Plugin]
  agendaCategory(id: ID!): AgendaCategory!
  checkAuth: User!
  customDataByOrganization(organizationId: ID!): [UserCustomData!]!
  customFieldsByOrganization(id: ID!): [OrganizationCustomField]
  directChatsByUserID(id: ID!): [DirectChat]
  directChatsMessagesByChatID(id: ID!): [DirectChatMessage]
  event(id: ID!): Event
  eventVolunteersByEvent(id: ID!): [EventVolunteer]
=======
  adminPlugin(orgId: ID!): [Plugin]
  checkAuth: User!
  directChatsByUserID(id: ID!): [DirectChat]
  directChatsMessagesByChatID(id: ID!): [DirectChatMessage]
  event(id: ID!): Event
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  eventsByOrganization(id: ID, orderBy: EventOrderByInput): [Event]
  eventsByOrganizationConnection(
    first: Int
    orderBy: EventOrderByInput
    skip: Int
    where: EventWhereInput
  ): [Event!]!
<<<<<<< HEAD
  advertisementsConnection: [Advertisement]
=======
  getAdvertisements: [Advertisement]
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  getDonationById(id: ID!): Donation!
  getDonationByOrgId(orgId: ID!): [Donation]
  getDonationByOrgIdConnection(
    first: Int
    orgId: ID!
    skip: Int
    where: DonationWhereInput
  ): [Donation!]!
  getPlugins: [Plugin]
  getlanguage(lang_code: String!): [Translation]
  hasSubmittedFeedback(eventId: ID!, userId: ID!): Boolean
<<<<<<< HEAD
  isSampleOrganization(id: ID!): Boolean!
  joinedOrganizations(id: ID): [Organization]
  me: UserData!
  myLanguage: String
  fundsByOrganization(organizationId: ID!, where: FundWhereInput): [Fund]
=======
  joinedOrganizations(id: ID): [Organization]
  me: User!
  myLanguage: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  organizations(id: ID, orderBy: OrganizationOrderByInput): [Organization]
  organizationsConnection(
    first: Int
    orderBy: OrganizationOrderByInput
    skip: Int
    where: OrganizationWhereInput
  ): [Organization]!
  organizationsMemberConnection(
    first: Int
    orderBy: UserOrderByInput
    orgId: ID!
    skip: Int
    where: UserWhereInput
  ): UserConnection!
  plugin(orgId: ID!): [Plugin]
  post(id: ID!): Post
  postsByOrganization(id: ID!, orderBy: PostOrderByInput): [Post]
  postsByOrganizationConnection(
    first: Int
    id: ID!
    orderBy: PostOrderByInput
    skip: Int
    where: PostWhereInput
  ): PostConnection
  registeredEventsByUser(id: ID, orderBy: EventOrderByInput): [Event]
  registrantsByEvent(id: ID!): [User]
<<<<<<< HEAD
  user(id: ID!): UserData!
  userLanguage(userId: ID!): String
  users(
    first: Int
    orderBy: UserOrderByInput
    skip: Int
    where: UserWhereInput
  ): [UserData]
=======
  user(id: ID!): User!
  userLanguage(userId: ID!): String
  users(orderBy: UserOrderByInput, where: UserWhereInput): [User]
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  usersConnection(
    first: Int
    orderBy: UserOrderByInput
    skip: Int
    where: UserWhereInput
<<<<<<< HEAD
  ): [UserData]!
  venue(id:ID!):[Venue]
=======
  ): [User]!
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input RecaptchaVerification {
  recaptchaToken: String!
}

enum Recurrance {
  DAILY
  MONTHLY
  ONCE
  WEEKLY
  YEARLY
}

<<<<<<< HEAD
input RecurrenceRuleInput {
  count: Int
  frequency: Frequency
  weekDays: [WeekDays]
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
enum Status {
  ACTIVE
  BLOCKED
  DELETED
}

type Subscription {
  directMessageChat: MessageChat
  messageSentToDirectChat: DirectChatMessage
  messageSentToGroupChat: GroupChatMessage
  onPluginUpdate: Plugin
}

<<<<<<< HEAD
=======
type Task {
  _id: ID!
  completed: Boolean
  createdAt: DateTime!
  creator: User!
  deadline: DateTime
  description: String
  event: Event!
  title: String!
  volunteers: [User]
}

input TaskInput {
  deadline: DateTime!
  description: String!
  title: String!
}

enum TaskOrderByInput {
  createdAt_ASC
  createdAt_DESC
  deadline_ASC
  deadline_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
scalar Time

input ToggleUserTagAssignInput {
  tagId: ID!
  userId: ID!
}

type Translation {
  en_value: String
  lang_code: String
  translation: String
  verified: Boolean
}

enum Type {
  PRIVATE
  UNIVERSAL
}

scalar URL

type UnauthenticatedError implements Error {
  message: String!
}

type UnauthorizedError implements Error {
  message: String!
}

<<<<<<< HEAD
input UpdateActionItemCategoryInput {
  isDisabled: Boolean
  name: String
}

input UpdateActionItemInput {
  assigneeId: ID
  completionDate: Date
  dueDate: Date
  isCompleted: Boolean
  postCompletionNotes: String
  preCompletionNotes: String
}

input UpdateAdvertisementInput {
  _id: ID!
  endDate: Date
  link: String
  name: String
  startDate: Date
  type: AdvertisementType
}

type UpdateAdvertisementPayload {
  advertisement: Advertisement
}

input UpdateAgendaCategoryInput {
  description: String
  name: String
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
input UpdateEventInput {
  allDay: Boolean
  description: String
  endDate: Date
  endTime: Time
  isPublic: Boolean
  isRegisterable: Boolean
  latitude: Latitude
  location: String
  longitude: Longitude
  recurrance: Recurrance
  recurring: Boolean
  startDate: Date
  startTime: Time
  title: String
}

<<<<<<< HEAD
input UpdateEventVolunteerInput {
  eventId: ID
  isAssigned: Boolean
  isInvited: Boolean
  response: EventVolunteerResponse
}

input UpdateOrganizationInput {
  address: AddressInput
  description: String
  name: String
  userRegistrationRequired: Boolean
  visibleInSearch: Boolean
}

input AddressInput {
  city: String
  countryCode: String
  dependentLocality: String
  line1: String
  line2: String
  postalCode: String
  sortingCode: String
  state: String
}

enum EducationGrade {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
  GRADUATE
  KG
  NO_GRADE
  PRE_KG
}

enum EmploymentStatus {
  FULL_TIME
  PART_TIME
  UNEMPLOYED
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum MaritalStatus {
  DIVORCED
  ENGAGED
  MARRIED
  SEPERATED
  SINGLE
  WIDOWED
}

input UpdateUserInput {
  address: AddressInput
  birthDate: Date
  educationGrade: EducationGrade
  email: EmailAddress
  employmentStatus: EmploymentStatus
  firstName: String
  gender: Gender
  lastName: String
  maritalStatus: MaritalStatus
  phone: UserPhoneInput
=======
input UpdateEventProjectInput {
  description: String
  title: String
}

input UpdateOrganizationInput {
  description: String
  isPublic: Boolean
  location: String
  name: String
  visibleInSearch: Boolean
}

input UpdateTaskInput {
  completed: Boolean
  deadline: DateTime
  description: String
  title: String
}

input UpdateUserInput {
  email: EmailAddress
  firstName: String
  lastName: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input UpdateUserPasswordInput {
  confirmNewPassword: String!
  newPassword: String!
  previousPassword: String!
}

input UpdateUserTagInput {
  _id: ID!
  name: String!
}

input UpdateUserTypeInput {
  id: ID
  userType: String
}

scalar Upload

type User {
  _id: ID!
<<<<<<< HEAD
  address: Address
  appUserProfileId: AppUserProfile
  birthDate: Date
  createdAt: DateTime!
  educationGrade: EducationGrade
  email: EmailAddress!
  employmentStatus: EmploymentStatus
  firstName: String!
  gender: Gender
  image: String
  joinedOrganizations: [Organization]
  lastName: String!
  maritalStatus: MaritalStatus
  membershipRequests: [MembershipRequest]
  organizationsBlockedBy: [Organization]
  phone: UserPhone
  pluginCreationAllowed: Boolean!
=======
  adminApproved: Boolean
  adminFor: [Organization]
  appLanguageCode: String!
  assignedTasks: [Task]
  createdAt: DateTime
  createdEvents: [Event]
  createdOrganizations: [Organization]
  email: EmailAddress!
  eventAdmin: [Event]
  firstName: String!
  image: String
  joinedOrganizations: [Organization]
  lastName: String!
  membershipRequests: [MembershipRequest]
  organizationUserBelongsTo: Organization
  organizationsBlockedBy: [Organization]
  pluginCreationAllowed: Boolean
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  registeredEvents: [Event]
  tagsAssignedWith(
    after: String
    before: String
    first: PositiveInt
    last: PositiveInt
    organizationId: ID
  ): UserTagsConnection
<<<<<<< HEAD
  updatedAt: DateTime!
}

type Fund {
  _id: ID!
  campaigns: [FundraisingCampaign!]
  createdAt: DateTime!
  isArchived: Boolean!
  isDefault: Boolean!
  name: String!
  creator: User
  organizationId: ID!
  refrenceNumber: String
  taxDeductible: Boolean!
  updatedAt: DateTime!
}

input FundWhereInput {
  name_contains: String
=======
  tokenVersion: Int!
  userType: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
}

input UserAndOrganizationInput {
  organizationId: ID!
  userId: ID!
}

<<<<<<< HEAD
type UserPhone {
  home: PhoneNumber
  mobile: PhoneNumber
  work: PhoneNumber
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
type UserConnection {
  aggregate: AggregateUser!
  edges: [User]!
  pageInfo: PageInfo!
}

<<<<<<< HEAD
type UserCustomData {
  _id: ID!
  organizationId: ID!
  userId: ID!
  values: JSON!
}

type UserData {
  appUserProfile: AppUserProfile!
  user: User!
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
type UserEdge {
  cursor: String!
  node: User!
}

<<<<<<< HEAD
type UserFamily {
  _id: ID!
  admins: [User!]!
  creator: User!
  title: String
  users: [User!]!
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
input UserInput {
  appLanguageCode: String
  email: EmailAddress!
  firstName: String!
  lastName: String!
  organizationUserBelongsToId: ID
  password: String!
}

enum UserOrderByInput {
<<<<<<< HEAD
=======
  appLanguageCode_ASC
  appLanguageCode_DESC
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
}

<<<<<<< HEAD
type UserPhone {
  home: PhoneNumber
  mobile: PhoneNumber
  work: PhoneNumber
}

input UserPhoneInput {
  home: PhoneNumber
  mobile: PhoneNumber
  work: PhoneNumber
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
type UserTag {
  _id: ID!
  childTags(input: UserTagsConnectionInput!): UserTagsConnectionResult!
  name: String!
  organization: Organization
  parentTag: UserTag
  usersAssignedTo(input: UsersConnectionInput!): UsersConnectionResult!
}

type UserTagEdge {
  cursor: String!
  node: UserTag!
}

type UserTagsConnection {
  edges: [UserTagEdge!]!
  pageInfo: ConnectionPageInfo!
}

input UserTagsConnectionInput {
  cursor: String
  direction: PaginationDirection!
  limit: PositiveInt!
}

type UserTagsConnectionResult {
  data: UserTagsConnection
  errors: [ConnectionError!]!
}

enum UserType {
  ADMIN
<<<<<<< HEAD
  NON_USER
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  SUPERADMIN
  USER
}

input UserWhereInput {
<<<<<<< HEAD
=======
  admin_for: ID
  appLanguageCode: String
  appLanguageCode_contains: String
  appLanguageCode_in: [String!]
  appLanguageCode_not: String
  appLanguageCode_not_in: [String!]
  appLanguageCode_starts_with: String
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
  email: EmailAddress
  email_contains: EmailAddress
  email_in: [EmailAddress!]
  email_not: EmailAddress
  email_not_in: [EmailAddress!]
  email_starts_with: EmailAddress
  event_title_contains: String
  firstName: String
  firstName_contains: String
  firstName_in: [String!]
  firstName_not: String
  firstName_not_in: [String!]
  firstName_starts_with: String
  id: ID
  id_contains: ID
  id_in: [ID!]
  id_not: ID
  id_not_in: [ID!]
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_in: [String!]
  lastName_not: String
  lastName_not_in: [String!]
  lastName_starts_with: String
}

type UsersConnection {
  edges: [UserEdge!]!
  pageInfo: ConnectionPageInfo!
}

input UsersConnectionInput {
  cursor: String
  direction: PaginationDirection!
  limit: PositiveInt!
}

type UsersConnectionResult {
  data: UsersConnection
  errors: [ConnectionError!]!
}

<<<<<<< HEAD
enum WeekDays {
  FR
  MO
  SA
  SU
  TH
  TU
  WE
}

=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
input createChatInput {
  organizationId: ID!
  userIds: [ID!]!
}

input createGroupChatInput {
  organizationId: ID!
  title: String!
  userIds: [ID!]!
}
<<<<<<< HEAD

type Venue {
  _id: ID!
  capacity: Int!
  description: String
  imageUrl: URL
  name: String!
  organization: Organization!
}

input VenueInput {
  capacity: Int!
  description: String
  file: String
  name: String!
  organizationId: ID!
}

input createUserFamilyInput {
  title: String!
  userIds: [ID!]!
}
=======
>>>>>>> a320d35e91b2a3d10a9143384969dba0973c37f1
